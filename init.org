f#+TITLE: Emacs Configuration
#+AUTHOR: Steve Phillips
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Introduction

I've been using Emacs since 1989, when I started working at Convex Computer and was given the choice between VI and Emacs. Coming from ETA Systems where we used Apollo Workstations, I had little experience with UNIX. The Apollos used Aegis OS, which was more like Multics, and UNIX seemed a bit primitive in comparison. The Convex machines were Sun workstations, so BSD UNIX was now my home. 

As it happened, my office-mate was an Emacs user so thats what I started using. All of my Endot HDL code was done in Emacs. I still have my yellow Gnu Emacs Manual, Sixth Edition, Emacs Version 18 for Unix Users, March 1987. It came straight from the free Software Foundation and looks like a typical copy shop book of the period, with the plastic ring binder on the edge.
 
Over the years my .emacs file followed me from job to job. At Cray Research it got to the point where I basically lived inside of emacs, including email and Usenet, but eventually I did less coding and my emacs usage dropped off. I still used it when I was coding, but other applications handled most of my management work.

Lately I've been doing more coding and have been discovering that Emacs has changed a lot over the years. Oh, the basics are the same, but the additional add-on packages have added so many new features. I'm now exploring all of these new features and incoporating them as I go.

I'm using a literate programming style for my Emacs configuration now by using org-mode and org-babel. All configuration is in this org file (~/.emacs.d/init.org). The code snipets in this file are extracted and written to the init.el file automagically by org-babel everytime this file is saved. See the [[*Auto-tangle Configuration Files]] section to see how that is done.

* Installation

This is an Emacs configuration file written in [[http://orgmode.org][Org mode]]. It is an attempt to keep my =~/.emacs.d= tidy, but still be able to keep it all in one file. I aim to briefly explain all my configurations as I go along!

If you really do want to try this config out, this is how I'd go about it:

First, go to your home directory

#+BEGIN_SRC sh :tangle no
cd $HOME
#+END_SRC

Backup your old =~/.emacs.d= (if necessary).

#+BEGIN_SRC sh :tangle no
mv ~/.emacs.d ~/.emacs.d-bak
#+END_SRC

Clone this repo

#+BEGIN_SRC sh :tangle no
git clone https://github.com/stevephillipsorg/.emacs.d.git
#+END_SRC

On first run it should install a bunch of packages (this might take a while), and you might have to restart your Emacs the first time. If you experience bugs, please let me know!

* Meta 

** init.org vs init.el vs init.elc

*** Methodology

All changes to the configuration should be done in =init.org=, *not* in =init.el=. Any changes in the =init.el= will be overwritten when saving =init.org=. The =init.el= in this repo should not be tracked by git, and is replaced the first time Emacs is started (assuming it has been renamed to =~/.emacs.d=).

The basic idea is that the repo from Github contains a simple =init.el= that is loaded the first time Emacs is run after cloning the repo. This simple =init.el= is sufficient to load this =init.org= file and create a proper =init.el= from it, using =org-babel=. The simple init.el is overwritten and all subsequent Emacs sessions will use the real =init.el= generated from this =init.org= file.

*** Initial init.el

Here is the simple =init.el= file included in the git repo:

#+BEGIN_SRC emacs-lisp :tangle no
;; This file replaces itself with the actual configuration at first run.

;; We can't tangle without org!
(require 'org)
;; Open the configuration
(find-file (concat user-emacs-directory "init.org"))
;; tangle it
(org-babel-tangle)
;; load it
(load-file (concat user-emacs-directory "init.el"))
;; Optionally, finally byte-compile it
;;(byte-compile-file (concat user-emacs-directory "init.el"))
#+END_SRC

*** Replacing initial init.el via tangle

Emacs can't load =.org=-files directly, but =org-mode= provides functions to extract the code blocks and write them to a file. There are multiple ways of handling this; like suggested by [[http://emacs.stackexchange.com/questions/3143/can-i-use-org-mode-to-structure-my-emacs-or-other-el-configuration-file][this StackOverflow post]], one could just use =org-babel-load-file=, but I had problems with byte-compilation. Previously I tracked both the =.org=- and =.el=-files, but the git commits got a little messy. So here is a new approach.

*** Protecting Initial init.el

There is no reason to track the =init.el= that is generated; by running the following command =git= will not bother tracking it:

#+BEGIN_SRC sh :tangle no
git update-index --assume-unchanged init.el
#+END_SRC

If one wishes to make changes to the repo-version of =init.el= start tracking again with:

#+BEGIN_SRC sh :tangle no
git update-index --no-assume-unchanged init.el
#+END_SRC

** Theory vs Practice

*** Useful commands

   Some commands that I find useful but also have a hard time remembering:

|-----------+----------------------------|
| *Key Seq* | *Command*                  |
|-----------+----------------------------|
| C-x C-e   | eval-last-sexp             |
| C-h k     | describe-key               |
| M-q       | fill-paragraph             |
| <F5>      | Select another theme       |
|-----------+----------------------------|
| C-x C-=   | text-scale-adjust increase |
| C-x C--   | text-scale-adjust decrease |
|-----------+----------------------------|
| C-x r SPC | Save point to register     |
| C-x r j   | Jump to register           |
|-----------+----------------------------|

*** Package List

   The various packages I use are listed here:

|-----------------+------------------------------------------------------|
| Package Name    | Description                                          |
|-----------------+------------------------------------------------------|
| desktop         | Saves session and restores on restart                |
| flycheck        | Syntax checker                                       |
| elpy            | Python extension                                     |
| ivy             | Enhanced mini-buffer completion                      |
| - counsel       | Ivy enhancements                                     |
| - ivy-rich      | Make Ivy and Counsel pretty                          |
| neotree         | Directory browser like in Finder                     |
| org-mode        | Super duper Markdown mode                            |
| - org-bullets   | Make Org headlines have bullet icons                 |
| package         | Package management and use-package function          |
| smart-mode-line | Enhanced mode line                                   |
| smartscan       | Quickly search for symbol at point with M-n and M-p  |
| swiper          | Enhanced isearch with completion list in mini-buffer |
| try             | Try a package without use-package                    |
| which-key       | Interactively show command completions               |
|-----------------+------------------------------------------------------|

*** Packages to try someday

|-------------------+-------------------|
| Package Name      | Description       |
|-------------------+-------------------|
| simpleclip        | [[https://github.com/rolandwalker/simpleclip][GitHub]]            |
| writer-word-goals | [[https://tinyurl.com/ygy5dylj][GitHub]]            |
| csv-mode          | [[https://elpa.gnu.org/packages/csv-mode.html][ELPA]]              |
| kubernetes-el     | [[https://github.com/chrisbarrett/kubernetes-el][GitHub]]            |
| ecloud            | [[https://github.com/techniumlabs/ecloud][GitHub]]            |
|-------------------+-------------------|

*** Key Mapping

Emacs supports the Modifier keys Control, Meta, Super and Hyper. These can be mapped to keys on typical keyboards that have other labels, such as Command and Option on Apple keyboards, and Windows and Alt on Windows. The following tables specify how I have mapped the keys for Macs and Windows.

|------------------+------------------+---------------|
| Apple Key        | Windows Key      | Emacs Meaning |
|------------------+------------------+---------------|
| Control/CapsLock | Control/CapsLock | Control 'C-'  |
| Alt/Option       | Alt              | Meta    'M-'  |
| Command/Apple    | Windows          | Super   's-'  |
| Function/fn      | Function/Fn      | Hyper   'H-'  |
|------------------+------------------+---------------|

Note that I usually map the CapsLock key to be a Control key for the entire OS, So that has to be done via System preferences

* Configurations

** Header

Start the init.el with a warning about editing it directly, so that if someone does open that file they have been given fair warning. We set lexical-binding her for some reason I don't remember...

#+begin_src emacs-lisp
;;; -*- lexical-binding: t -*-
;; NOTE: init.el is now generated from ~/.emacs.d/init.org.  Please 
;; edit that file in Emacs and init.el will be generated automatically!
#+end_src

** Personal Info

Set my name and email address. Is there also a "work" email address?

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Steve Phillips"
      user-mail-address "steve@phillips.org")
#+END_SRC

** Garbage Collection

A common optimization is to temporarily disable garbage collection during initialization, but in general the default is too low for madern machines. Here, we set the =gc-cons-threshold= to a ridiculously large number during initialization, and then set is to a more reasonable number afterwards. Report the Emacs startup time in \*messages\*.

Based on [fn:daviwil] and [fn:larstvei]

#+BEGIN_SRC emacs-lisp
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold most-positive-fixnum)
;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)
		     (setq gc-cons-threshold (* 20 1000 1000))
		     ))
#+END_SRC

** Auto-Tangling

 The =init.el= should (after the first run) mirror the source blocks in the =init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which extracts the code blocks from the current file into a source-specific file (in this case a =.el=-file).

 To avoid doing this each time a change is made we can add a function to the =after-save-hook= ensuring to always tangle and byte-compile the =init.org= after changes.

 #+BEGIN_SRC emacs-lisp
   (defun sjp/tangle-init ()
     "If the current buffer is 'init.org' the code-blocks are
   tangled, and the tangled file is compiled."
     (when (equal (buffer-file-name)
		  (expand-file-name (concat user-emacs-directory "init.org")))
       ;; Avoid running hooks when tangling.
       (let ((prog-mode-hook nil))
	 (org-babel-tangle)
         ;; The new init.el is now created. Optionally, it can be byte compiled
	 ;;(byte-compile-file (concat user-emacs-directory "init.el"))
	 )))

   (add-hook 'after-save-hook 'sjp/tangle-init)
 #+END_SRC
 
** After Init Hooks 

There are a few things I like to do after the init has finished, like load the custom.el stuff and start the server. I also like to keep a few settings private, so we load a =private.el= if it exists after the init-file has loaded.

#+BEGIN_SRC emacs-lisp
  (add-hook
   'after-init-hook
   (lambda ()
    (let ((custom-file (concat user-emacs-directory "custom.el"))
          (private-file (concat user-emacs-directory "private.el")))
       (when (file-exists-p custom-file)  (load-file custom-file))
       (when (file-exists-p private-file) (load-file private-file))
       (server-start))))
#+END_SRC

** Useful Functions

*** Toggle between two points

These two function allow me to quickly switch between two points in a buffer. It uses the "register" functions but in a way that I can bind them to keys to use quickly. I personally set "C-." to sjp/point-to-register and "S-." to sjp/jump-to-register. Hit "C-." to set your initial point, then you can go else where in the buffer and use "S-." to toggle back and forth between the current position and the point you saved.

#+BEGIN_SRC emacs-lisp
(defun sjp/point-to-register ()
  "Store cursorposition _fast_ in a register. Use sjp/jump-to-register
to jump back to the stored position."
  (interactive)
  (point-to-register 8))

(defun sjp/jump-to-register ()
  "Switches between current cursorposition and position
that was stored with sjp/point-to-register."
  (interactive)
  (let ((tmp (point-marker)))
    (jump-to-register 8)
    (set-register 8 tmp)))

(global-set-key (kbd "C-.") 'sjp/point-to-register)
(global-set-key (kbd "s-.") 'sjp/jump-to-register)
#+END_SRC

*** Switching Themes Cleanly

I like to switch between themes depending on time of day and my mood. By default Emacs loads themes on top of each other which can lead to odd conflicts. By using =counsel-load-theme=, I get the Ivy selection method.

#+begin_src emacs-lisp
  (defun sjp/switch-theme ()
    (interactive)
    (while custom-enabled-themes
      (disable-theme (car custom-enabled-themes)))
    (counsel-load-theme))
  (global-set-key (kbd "<f5>") 'sjp/switch-theme)
#+end_src

*** Cleaning up Theme list

A work in progress, this function will eventually be how I block some themes from showing up when the list of avaiable themes is shown. Some theme packages install a bunch of variations on a theme, most of which are not of interest. This function will allow me to just show the ones I like.

#+begin_src emacs-lisp :tangle no
  (defvar sjp/blacklisted-themes '("anti-zenburn",  "sanityinc-solarized-dark",
                                   "leuven-dark",  "material", "poet-dark-monochrome",
                                   "poet-dark",  "deeper-blue",  "light-blue",
                                   "manoj-dark",  "misterioso", "tsdh-dark",
                                   "tsdh-light",  "wheatgrass"))
  ;; "whiteboard" "wombat"

  (defun sjp/theme-allowed (orig-fun theme-name)" 
    (and (funcall orig-fun theme-name)
         (not (member (symbol-name theme-name) sjp/blacklisted-themes))))
  (advice-add 'custom-theme-name-valid-p :around #'sjp/theme-allowed)
#+end_src

** Random Simple Settings

These are settings that I have had forever. Some I'm not sure if I really need with modern Emacs so I have commented them out with the ";;;org;" prefix. 

#+BEGIN_SRC emacs-lisp
;; Add my personal elisp lib to the load path
(setq load-path (cons "~/.emacs.d/sjp-elisp" load-path))

(setq inhibit-splash-screen t)        ;; no splash screen at startup
(tool-bar-mode -1)                    ;; no graphical toolbar
(setq inhibit-default-init t)         ;; disable loading of
                                      ;; "default.el" at startup

(setq transient-mark-mode t)          ;; enable visual feedback on
                                      ;;    selections 
(set-scroll-bar-mode 'right)          ;; Put scrollbar on right to
                                      ;;   match other windows. 
;;;org;(setq frame-title-format              ;; default to better frame titles 
;;;org;      (concat  "%b - emacs@" (system-name)))

(defalias 'list-buffers 'ibuffer)     ;; Use ibuffer instead of plain buffer list
(setq diff-switches "-u")             ;; default to unified diffs
(setq require-final-newline 'query)   ;; always end a file with a newline
(fset 'yes-or-no-p 'y-or-n-p)         ;; brevity

;; Try some mouse wheel settings
;;;org;(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
;;;org;(setq mouse-wheel-progressive-speed nil)

;; Use isearch by default
;;;org;(global-set-key (kbd "C-s") 'isearch-forward-regexp)
;;;org;(global-set-key (kbd "C-r") 'isearch-backward-regexp)
;;;org;(global-set-key (kbd "C-M-s") 'isearch-forward)
;;;org;(global-set-key (kbd "C-M-r") 'isearch-backward)

;;;org;(show-paren-mode 1)                   ;; Highlight matching paren
(setq-default indent-tabs-mode nil)   ;; 
;;;org;;;(setq x-select-enable-clipboard t)    ;; Under X, use X clipboard
;;;org;;;(setq x-select-enable-primary t)      ;; Under X, use X clipboard
;;;org;(setq save-interprogram-paste-before-kill t) 
;;;org;(setq apropos-do-all t)
;;;org;(setq mouse-yank-at-point t)          ;; Mouse yanking inserts at the
;;;org;                                      ;;   point instead of the
;;;org;                                      ;;   location of the click
(setq require-final-newline t)        ;; require file to end with newline 
(setq visible-bell t)
;;;org;(setq load-prefer-newer t)
;;;org;(setq ediff-window-setup-function 'ediff-setup-windows-plain)
(setq backup-directory-alist `(("." . ,(concat user-emacs-directory
					       "backups"))))
;; Set some mode hooks
;;(setq c-mode-common-hook ;; will be used by all modes derived from c-mode
;;      '(lambda ()
;;         (ggtags-mode 1)
;;         ))
#+END_SRC

** Desktop Sessions

Desktop is a system for saving current session and restoring on restart. 

_NOTE: I have tangling turned off for this right now to see if I really miss it._

You can set an environment variable change the location of the save file. The default is the ~/.emacs.d/

#+BEGIN_SRC emacs-lisp :tangle no
(when (getenv "EMACSSAVEMODEDIR")
  (setq desktop-path (list (getenv "EMACSSAVEMODEDIR"))) )

;;; Turn on the desktop save function
(desktop-save-mode 1)

;;;from http://www.emacswiki.org/emacs/Desktop#toc3
;;; "add something like this to your init file to auto-save your desktop when Emacs is idle: – Doom"
(require 'desktop)
  (defun my-desktop-save ()
    (interactive)
    ;; Don't call desktop-save-in-desktop-dir, as it prints a message.
    (if (eq (desktop-owner) (emacs-pid))
        (desktop-save desktop-dirname)))
  (add-hook 'auto-save-hook 'my-desktop-save)
#+END_SRC

** Mac Specific Setup

There are somethings that we want to set up on macOS but not others. See [fn:danielmai] for more ideas.

#+BEGIN_SRC emacs-lisp
    (when (string-equal system-type "darwin")
      ;; Non-native fullscreen
      (setq ns-use-native-fullscreen nil)
      ;; delete files by moving them to the trash
      (setq delete-by-moving-to-trash t)
      (setq trash-directory "~/.Trash")

      ;; set the Fn key as the hyper key
      (setq ns-function-modifier 'hyper)

      ;; buffer switching
      (global-set-key (kbd "s-{") 'previous-buffer)
      (global-set-key (kbd "s-}") 'next-buffer)

      ;; The macOS =ls= command does not support --dired, so use the emacs
      ;; lisp version instead
      (setq ls-lisp-use-insert-directory-program nil)
      (require 'ls-lisp)

      ;; disable the key that minimizes emacs to the dock because I don't
      ;; minimize my windows
      (global-unset-key (kbd "C-z"))

      ;; Not going to use these commands
      (put 'ns-print-buffer 'disabled t)
      (put 'suspend-frame 'disabled t)
      )

#+END_SRC

** Packages Setup

Setup the standard Emacs package handler

#+BEGIN_SRC emacs-lisp
(require 'package) 
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives
             '("org" . "https://orgmode.org/elpa/"))
;;sjp-not needed anymore;;(when (< emacs-major-version 24)
;;sjp-not needed anymore;;  ;; For important compatibility libraries like cl-lib
;;sjp-not needed anymore;;  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
(package-initialize)
#+END_SRC

*** Use-Package

Use-Package is used to fetch and configure packages. See https://goo.gl/LtWMy for details

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t
      use-package-verbose t)
#+END_SRC

*** Auto-Package-Update

I use auto-package-update to automatically update packages. With this setup, packages will be updated every 4 days, and the old packages will be removed. This creates a risk that an updated pacjage may break something, but thats a risk I'm willling to take, especially because out-of-date packages can also break things. Got this from user *cslux* on StackExchange (https://tinyurl.com/yghmmwvw).

#+BEGIN_SRC emacs-lisp :tangle no
(use-package auto-package-update
   :ensure t
   :config
   (setq auto-package-update-delete-old-versions t
         auto-package-update-interval 4)
   (auto-package-update-maybe))
#+END_SRC

** Load Packages

Now that we have =package= and =use-package= set up, we can start loading and configuring packages

*** Try

    Allows one to try a new package without adding it to use-package. The package will go away the next time emacs is restarted

#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC

*** Which-Key

    Displays key bindings for buffer. After starting a command sequence, it will show possible completions. For instance, hit C-x, wait a sec, and a help window will pop up, normally a vertical window on the right. GitHub page: https://goo.gl/vYPnea

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t  ;; make sure it loads correctly
  :init
  (which-key-mode)  ;; turn on which-key mode
  ;; try to use a side window if there is room, otherwise
  ;;   use a bottom window 
  (which-key-setup-side-window-right-bottom))
#+END_SRC

*** Modus-Themes

    These are some very pretty themes, one light theme (operandi) and one dark theme (vivendi).
    
#+BEGIN_SRC emacs-lisp
  (use-package modus-themes
    :ensure
    :init
    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-slanted-constructs t
          modus-themes-bold-constructs nil)
  
    ;; Load the theme files before enabling a theme
    (modus-themes-load-themes)
    :config
    ;; Load the theme of your choice:
    (modus-themes-load-operandi) ;; OR (modus-themes-load-vivendi)
    ;; This binding is done elsewhere in this init
    ;;  :bind ("<f5>" . modus-themes-toggle)
    )
#+END_SRC

*** Other Themes

Some other themes I like. Load them here and then select them with <F5>

#+begin_src emacs-lisp
;;  (use-package anti-zenburn-theme) ;; blues/purple on medium grey
  (use-package doneburn-theme)     ;; muted colors on white
  (use-package hc-zenburn-theme)   ;; muted tans/green on dark grey
  (use-package labburn-theme)      ;; muted tans/green on dark grey
  (use-package zenburn-theme)      ;; tans/green on dark grey
;;  (use-package material-theme)     ;; too many flavors
;;  (use-package alect-theme)        ;; Not found?
;;  (use-package colorless-theme)    ;; Not found?
  (use-package leuven-theme)
  (use-package color-theme-sanityinc-solarized)
  (use-package organic-green-theme)
;;  (use-package base16-theme) ;; too many flavors
  (use-package poet-theme)
  #+end_src

*** Ivy

    Configure to use ivy-mode for completion. These config lines stolen from - https://tinyurl.com/yxas68kw

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :defer 0.1
  :diminish
  :bind (("C-c C-r" . ivy-resume)
         ("C-x B" . ivy-switch-buffer-other-window))
  :custom
  (ivy-count-format "(%d/%d) ")
  (ivy-use-virtual-buffers t)
  :config (ivy-mode))
#+END_SRC

**** Counsel

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :after ivy
  :config (counsel-mode)
;;  :bind ("<f5>" . counsel-load-theme)
)
#+END_SRC

**** Ivy-Rich

#+BEGIN_SRC emacs-lisp
(use-package ivy-rich
  :ensure t
  :after (:all ivy counsel)
  :init (setq ivy-rich-parse-remote-file-path t)
  :config (ivy-rich-mode 1))

#+END_SRC

**** Swiper
     
     GitHub page for Swiper - https://goo.gl/uv6e2k

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :after ivy
  :bind (("C-s" . swiper)
         ("C-r" . swiper)))

#+END_SRC

*** Auto-Complete

This adds a help utility to complete variable names as you type them, which is nice, except that it throws my typing off because it grabs control of curser movement. More trouble than its worh, so it isn't current used (tangled). 

#+BEGIN_SRC emacs-lisp :tangle no
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default) ;; use default settings
    (global-auto-complete-mode t) ;; use everywhere
    ))
#+END_SRC

*** Command-Log-Mode

    This mode displays commands key strokes and the associated functions in a right hand buffer. Useful for demonstrations or if you want to have a record of what you did for some reason

- Must first enable it for the buffer
  - M-x command-log-mode
- Then enable the display buffer
  - M-x clm/toggle-command-log-buffer OR
  - C-c o

#+BEGIN_SRC emacs-lisp
(use-package command-log-mode
  :ensure t)
#+END_SRC

*** Magit

    Interface to Git - https://magit.vc/

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-x g" . magit-status)
  )
#+END_SRC

*** Treemacs

    The following use-package snippet includes a list of all of treemacs’ configuration variables in their default setting. Setting them all yourself is not necessary, they are only listed here to encourage discoverability.

#+BEGIN_SRC emacs-lisp 
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
	    treemacs-deferred-git-apply-delay      0.5
	    treemacs-directory-name-transformer    #'identity
	    treemacs-display-in-side-window        t
	    treemacs-eldoc-display                 t
	    treemacs-file-event-delay              5000
	    treemacs-file-extension-regex          treemacs-last-period-regex-value
	    treemacs-file-follow-delay             0.2
	    treemacs-file-name-transformer         #'identity
	    treemacs-follow-after-init             t
	    treemacs-git-command-pipe              ""
	    treemacs-goto-tag-strategy             'refetch-index
	    treemacs-indentation                   2
	    treemacs-indentation-string            " "
	    treemacs-is-never-other-window         nil
	    treemacs-max-git-entries               5000
	    treemacs-missing-project-action        'ask
	    treemacs-move-forward-on-expand        nil
	    treemacs-no-png-images                 nil
	    treemacs-no-delete-other-windows       t
	    treemacs-project-follow-cleanup        nil
	    treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	    treemacs-position                      'left
	    treemacs-read-string-input             'from-child-frame
	    treemacs-recenter-distance             0.1
	    treemacs-recenter-after-file-follow    nil
	    treemacs-recenter-after-tag-follow     nil
	    treemacs-recenter-after-project-jump   'always
	    treemacs-recenter-after-project-expand 'on-distance
	    treemacs-show-cursor                   nil
	    treemacs-show-hidden-files             t
	    treemacs-silent-filewatch              nil
	    treemacs-silent-refresh                nil
	    treemacs-sorting                       'alphabetic-asc
	    treemacs-space-between-root-nodes      t
	    treemacs-tag-follow-cleanup            t
	    treemacs-tag-follow-delay              1.5
	    treemacs-user-mode-line-format         nil
	    treemacs-user-header-line-format       nil
	    treemacs-width                         35
	    treemacs-workspace-switch-cleanup      nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (pcase (cons (not (null (executable-find "git")))
		   (not (null treemacs-python-executable)))
	(`(t . t)
	 (treemacs-git-mode 'deferred))
	(`(t . _)
	 (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
	  ("M-0"       . treemacs-select-window)
	  ("C-x t 1"   . treemacs-delete-other-windows)
	  ("C-x t t"   . treemacs)
	  ("C-x t B"   . treemacs-bookmark)
	  ("C-x t C-t" . treemacs-find-file)
	  ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-icons-dired
    :after (treemacs dired)
    :ensure t
    :config (treemacs-icons-dired-mode))
#+END_SRC

The following optional treemacs related packages are available but I'm not using them

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)
   
  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)
  
  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))
 #+END_SRC

*** Neotree

    Depricating this in favor of Treemacs, so tangling is turned off for this. 

#+BEGIN_SRC emacs-lisp :tangle no
;; Neotree - https://goo.gl/N05Cdj
;; Directory browser like in Finder
(use-package neotree
  :init
  (global-set-key [f8] 'neotree-toggle))
#+END_SRC

*** Smart-Mode-Line

#+BEGIN_SRC emacs-lisp
;; smart-mode-line - https://goo.gl/cJjp28
;; makes your modeline smarter
(use-package smart-mode-line
  :init
 (setq sml/no-confirm-load-theme t) ;; see web page
 (sml/setup))
#+END_SRC

*** Flycheck

#+BEGIN_SRC emacs-lisp
;; flycheck - linter for many languages - https://www.flycheck.org/
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+END_SRC

*** Arduino-mode

#+BEGIN_SRC emacs-lisp
;; arduino-mode -
(use-package arduino-mode
  :init
  (setq auto-mode-alist (cons '("\\.\\(pde\\|ino\\)$" . arduino-mode) auto-mode-alist)))  
#+END_SRC

*** Markdown

#+BEGIN_SRC emacs-lisp
;; markdown-mode
(use-package markdown-mode
  :mode ("\\.\\(m\\(ark\\)?down\\|md\\)$" . markdown-mode)
  :config)
#+END_SRC

*** Elpy
    
#+BEGIN_SRC emacs-lisp
;; elpy - Extension for Python - https://elpy.readthedocs.io/en/latest/index.html#elpy
(use-package elpy
  :ensure t
  :init
  (elpy-enable))
#+END_SRC

*** Smartscan

Smartscan allows me to put my curser on a token/variable/word, and then search for the next or previous occurance with a single keystroke. By default, M-n searches forward and M-p searches backward. The github repo is at https://goo.gl/FWI0XF.

#+BEGIN_SRC emacs-lisp
(use-package smartscan
  :init
  (global-smartscan-mode 1))
#+END_SRC

#+RESULTS:

*** Disk-Usage

    Slick =du -cks= utility that creates a Dired-like display of disk usage.

_Currently disabled from tangling_

#+BEGIN_SRC emacs-lisp :tangle no
;; disk-usage
(use-package disk-usage
  :load-path "packages/disk-usage"
  )
#+END_SRC

*** Verilog Mode

Verilog-mode in Emacs is an amazing package that converts even diehard VI users to Emacs, just to be able to use it. Granted, they run Evil mode in Emacs but still...

#+BEGIN_SRC emacs-lisp
(use-package verilog-mode
  :mode ("\\.[ds]?vh?\\'" . verilog-mode)
  :init (setq verilog-auto-newline nil) ;; Non-nil means automatically newline after semicolons.
  )
#+END_SRC

This is how I always used to load verilog mode, before converting to use-package. Note that I didn't configure =ggtags-mode- above. Perhaps I should. *This code block is not tangled.* 

#+BEGIN_SRC emacs-lisp :tangle no
(autoload 'verilog-mode "verilog-mode" "Verilog mode" t )
(add-to-list 'auto-mode-alist '("\\.[ds]?vh?\\'" . verilog-mode))
(add-hook 'verilog-mode-hook
          '(lambda ()
             (setq verilog-auto-newline nil)
             (setq ggtags-mode t) ;; always run ggtags-mode in verilog mode
             ))
#+END_SRC


* Org Mode

[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

Much of this section was stolen from [fn:emacsfromscratch]

** Better Font Faces

The =sjp/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode=.  We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp

      (defun sjp/org-font-setup ()
        ;; Replace list hyphen with dot
        (font-lock-add-keywords 'org-mode
                                '(("^ *\\([-]\\) "
                                   (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

        ;; Set faces for heading levels
        (dolist (face '((org-level-1 . 2.4)
                        (org-level-2 . 2.0)
                        (org-level-3 . 1.8)
                        (org-level-4 . 1.6)
                        (org-level-5 . 1.4)
                        (org-level-6 . 1.2)
                        (org-level-7 . 1.2)
                        (org-level-8 . 1.2)))
  ;;;sjp;; Original setting from EFS 
  ;;;sjp;;      (dolist (face '((org-level-1 . 1.2)
  ;;;sjp;;                      (org-level-2 . 1.1)
  ;;;sjp;;                      (org-level-3 . 1.05)
  ;;;sjp;;                      (org-level-4 . 1.0)
  ;;;sjp;;                      (org-level-5 . 1.1)
  ;;;sjp;;                      (org-level-6 . 1.1)
  ;;;sjp;;                      (org-level-7 . 1.1)
  ;;;sjp;;                      (org-level-8 . 1.1)))
  ;;;sjp;;        (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face))
  ;;;sjp;;        (set-face-attribute (car face) nil :font "Calibri" :weight 'regular :height (cdr face))
          )

        ;; Ensure that anything that should be fixed-pitch in Org files appears that way
        (set-face-attribute 'org-block nil     :foreground nil :inherit 'fixed-pitch)
        (set-face-attribute 'org-table nil     :inherit 'fixed-pitch)
        (set-face-attribute 'org-formula nil   :inherit 'fixed-pitch)
        (set-face-attribute 'org-code nil      :inherit '(shadow fixed-pitch))
        (set-face-attribute 'org-table nil     :inherit '(shadow fixed-pitch))
        (set-face-attribute 'org-verbatim nil  :inherit '(shadow fixed-pitch))

        (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
        (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
        (set-face-attribute 'line-number nil   :inherit 'fixed-pitch)
        (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)
        (set-face-attribute 'org-special-keyword nil      :inherit '(font-lock-comment-face fixed-pitch)))

#+end_src

** Basic Config

This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates.  There's a lot to unpack in here so I'd recommend watching the videos for [[https://youtu.be/VcgjTEa0kU4][Part 5]] and [[https://youtu.be/PNE-mgkZ6HM][Part 6]] for a full explanation.

#+begin_src emacs-lisp

    (defun sjp/org-mode-setup ()
      (org-indent-mode)
      (variable-pitch-mode 1)
      (visual-line-mode 1))

    (use-package org
      :pin org
      :commands (org-capture org-agenda)
      :hook (org-mode . sjp/org-mode-setup)
      :config
      (setq org-ellipsis " ▾")

      (setq org-agenda-start-with-log-mode t)
      (setq org-log-done 'time)
      (setq org-log-into-drawer t)
      (sjp/org-font-setup)
      )

  ;;;sjp;    (setq org-agenda-files
  ;;;sjp;          '("~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org"
  ;;;sjp;            "~/Projects/Code/emacs-from-scratch/OrgFiles/Habits.org"
  ;;;sjp;            "~/Projects/Code/emacs-from-scratch/OrgFiles/Birthdays.org"))
#+END_SRC

There is a lot more Org config from EFS example, mostly for TODOs, Agenda and Capture that I left out here. Perhaps I'll go back and add some of that in when I get better at Org files.

*** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]].

#+begin_src emacs-lisp

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** Center Org Buffers

I use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp

  (defun sjp/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . sjp/org-mode-visual-fill))

#+end_src

** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
        (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))

#+end_src

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =sjp/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

There is a similar version of this defined in the Auto-Tangling section, so we won't tangle this one

#+begin_src emacs-lisp :tangle no

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun sjp/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'sjp/org-babel-tangle-config)))

#+end_src

* Footnotes
** Init File Examples

[fn:daviwil] https://github.com/daviwil/dotfiles/blob/master/Emacs.org
Dave did the Emacs From Scratch videos

[fn:emacsfromscratch] https://github.com/daviwil/emacs-from-scratch
From the youtube series on Emacs from Scratch

[fn:danielmai] https://github.com/danielmai/.emacs.d/blob/master/config.org
Has interesting Mac optimizations

[fn:sachc] https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org
Man, thats long. And not because there is a lot of description

[fn:sirpsci] https://github.com/SirPscl/emacs.d/blob/master/configuration.org

[fn:larstvei] https://github.com/larstvei/dot-emacs
Good description of how to set up and use init.org with git

[fn:novoid] https://github.com/novoid/dot-emacs/blob/master/config.org
Good description of packages used and keymap

[fn:thompson] https://blog.sumtypeofway.com/posts/emacs-config.html
Sems to have a good understanding of why we set random variables

[fn:tecosaur] https://github.com/tecosaur/emacs-config/blob/master/config.org
Super detailed, but Doom based

[fn:protesilaos] https://gitlab.com/protesilaos/dotfiles/-/blob/master/emacs/.emacs.d/prot-emacs.org
This is the guy that did the Modus themes

[fn:alhassy] https://github.com/alhassy/emacs.d
Very well described config

